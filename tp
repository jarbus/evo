#!/usr/bin/env python
import os
import time
import re
import glob
import time
import sys
import asyncio
import subprocess
from math import ceil, sqrt
from io import BytesIO

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from prompt_toolkit import PromptSession
from prompt_toolkit.validation import Validator, ValidationError
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.completion import Completer, Completion

from base64 import standard_b64encode
from collections import defaultdict

plt.style.use(['dark_background', 'fast'])
bindings = KeyBindings()
mpl_settings = "/tmp/jackplots.txt"
plot_name="/tmp/jackplotname.txt"
runlist = "/tmp/runlist.txt"
with open(mpl_settings, "w") as f:
    f.write("")
old_matches = []
px = 1/plt.rcParams['figure.dpi']  # pixel in inches
# load runs

async def read_csv(file: str):
    return pd.read_csv(file, dtype=np.float16, engine="pyarrow")


async def load():
    global runs, keys, matches
    with open(runlist, "w") as f:
        f.write("")
    runs = {}
    keys = None
    matches = []
    labels = []
    futures = []
    for f in sys.argv[1:]:
        file = os.path.join(os.path.join("", f),"metrics.csv")
        if not os.path.exists(file):
            file = os.path.join(os.path.join("", f),"results.txt")
            if not os.path.exists(file):
                print(f"WARNING: {file} does not exist!")
                continue
        try:
            label = os.path.basename(f)
            futures.append(read_csv(file))
            labels.append(label)

            # bug: all runs will appear after reload
            with open(runlist, "a") as f:
                f.write(f"{label}\n")
        except:
            raise OSError(f"Could not read {file}")
    run_data = await asyncio.gather(*futures)
    assert len(labels) == len(run_data)

    runs = dict(zip(labels, run_data))
    keys = list(set().union(*[v.keys() for v in runs.values()]))

# KITTY Graphics
def serialize_gr_command(**cmd):
    payload = cmd.pop('payload', None)
    cmd = ','.join(f'{k}={v}' for k, v in cmd.items())
    ans = []
    w = ans.append
    w(b'\033_G'), w(cmd.encode('ascii'))
    if payload:
        w(b';')
        w(payload)
    w(b'\033\\')
    return b''.join(ans)


def write_chunked(**cmd):
    data = standard_b64encode(cmd.pop('data'))
    while data:
        chunk, data = data[:4096], data[4096:]
        m = 1 if data else 0
        sys.stdout.buffer.write(serialize_gr_command(payload=chunk, m=m,
                                                    **cmd))
        sys.stdout.flush()
        cmd.clear()

def delete_all_imgs(**cmd):
    sys.stdout.buffer.write(serialize_gr_command(payload=None,a="d", **cmd))
    sys.stdout.flush()


# Image generation
def make_grid(unfiltered_metrics: list):
    if len(unfiltered_metrics) == 0:
        print("no metrics")
        return None
    unfiltered_metrics.sort()
    metrics = [m for m in unfiltered_metrics if not m.endswith("_min") and not m.endswith("_max") and not m.endswith("_std")]
    # make things graphs with 4, 8, 16 etc metrics 2 columns wide
    if len(metrics) % 2 == 0 and len(metrics) % 6 != 0:
        num_cols = 2
    else:
        num_cols = min(len(metrics), 3)
    num_rows = ceil(len(metrics) / num_cols)
    # users can change visible runs by commenting or deleting lines in runlist
    with open(runlist) as f:
        runs_to_plot = [r.strip() for r in f.readlines() if not r.startswith("#")]


    # run mpl commands before plotting
    with open(mpl_settings) as f:
        for line in f:
            line = line.strip().split()
            if line[0] == "style":
                if line[1] == "dark":
                    plt.style.use(["dark_background", "fast"])
                else:
                    plt.style.use(["classic", "fast"])
    
    fig, axes = plt.subplots(num_rows, num_cols, figsize=(600*px*3, 300*px*max(num_rows, 2)))
    for i, metric in enumerate(metrics):
        r, c = i // num_cols, i % num_cols
        ax = 0
        # matplotlib doesn't make 2d grid a dimension is len 1
        if num_cols==1:
            ax = axes
        elif num_rows==1:
            ax = axes[c]
        else:
            ax = axes[r,c]

        ax.set_title(metric)
        for run in runs_to_plot:
            if metric in runs[run].keys():
                label = None if len(runs) < 2 else run
                ax.plot(runs[run][metric], label=label, linewidth=4)

                if metric.endswith("_mean"):
                    # plot shaded area between min and max of metric
                    min_met = metric[:-5]+"_min"
                    max_met = metric[:-5]+"_max"
                    std_met = metric[:-5]+"_std"
                    assert min_met in unfiltered_metrics
                    assert max_met in unfiltered_metrics
                    ax.fill_between(list(range(len(runs[run][metric]))),runs[run][min_met],runs[run][max_met],alpha=0.2)
                    ax.fill_between(list(range(len(runs[run][metric]))),
                [m-sqrt(std) for m, std in zip(runs[run][metric], runs[run][std_met])],
                [m+sqrt(std) for m, std in zip(runs[run][metric], runs[run][std_met])],
                    alpha=0.2)

        if len(runs) > 1:
            ax.legend(loc="upper left")


        
        # run mpl commands after plotting
        with open(mpl_settings) as f:
            for line in f:
                line = line.strip().split()
                if len(line) not in (1, 2, 3):
                    continue
                
                if line[0] == "ylog":
                    ax.set_yscale('log')
                if line[0] == "xmin":
                    ax.set_xlim(max(ax.get_xlim()[0],float(line[1])))
                elif line[0] == "ymin":
                    ax.set_ylim(max(ax.get_ylim()[0],float(line[1])))
                elif line[0] == "xmax":
                    ax.set_xlim(None, min(ax.get_xlim()[1],float(line[1])))
                elif line[0] == "ymax":
                    ax.set_ylim(None, min(ax.get_ylim()[1],float(line[1])))
                elif line[0] == "legend":
                    ax.legend(loc=" ".join(line[1:]))

                
    return 1


def update_and_draw_grid():
    os.system("clear")
    # move cursor to bottom of screen
    for i in range(50):
        print()
    global matches 
    plt.clf()
    grid = make_grid([metric for metric in matches])
    if grid is not None:
        stream = BytesIO()
        stream.seek(0)
        plt.savefig(stream, format="png")
        data = stream.getvalue()
        delete_all_imgs()
        write_chunked(a='T', f=100, data=data)
        plt.close("all")
        print()


def get_matches(text):
    return list(filter(lambda x: re.match(text, x), keys))

#@bindings.add('"')
#def _(event):
#    global text, matches
#    load()
#    if text:
#        matches = get_matches(text)
#        update_and_draw_grid()
#    event.app.exit()

@bindings.add('?')
def _(event):
    subprocess.run(f"vim {mpl_settings}", shell=True)
    update_and_draw_grid()
    event.app.exit()

@bindings.add('\'')
def _(event):
    subprocess.run(f"vim {runlist}", shell=True)
    update_and_draw_grid()
    event.app.exit()

@bindings.add('/')
def _(event):
    with open(plot_name, "w") as f:
        f.write("")
    subprocess.run(["vim", plot_name])
    with open(plot_name) as f:
        name = f.read().strip()
        if name:
            plt.savefig(name, format="png")
    print("plot saved to", name)
    event.app.exit()

class RegexCompleter(Completer):
    def get_completions(self, document, complete_event):
        matches = get_matches(document.text)
        for match in matches:
            yield Completion(match, start_position=-len(document.text))


async def main():
    global matches, old_matches, text, old_text
    session = PromptSession( key_bindings=bindings, completer=RegexCompleter())

    while True:
        try:
            global text, old_text
            time.sleep(0.1)
            old_text = text
            text = await asyncio.wait_for(session.prompt_async('> '), timeout=60)
        except KeyboardInterrupt:  # Ctrl-C
            continue
        except EOFError:           # Ctrl-D
            break
        except asyncio.TimeoutError:
            await load()
            print("\r" + " "*40, end="")
            if old_text:
                matches = get_matches(old_text)
                update_and_draw_grid()
        else:
            if text:
                matches = get_matches(text)            
                if old_matches != matches:
                    update_and_draw_grid()
                    old_matches = matches.copy()

if __name__ == '__main__':
    text = None
    start = time.time()
    asyncio.run(load())
    print(f"Loading {len(runs)} asynchronously took {time.time() - start} seconds")
    asyncio.run(main())


#def match_counter():
#class RegexValidator(Validator):
#    def validate(self, document):
#        text = document.text
#        if not text: 
#            return
#        matches = get_matches(text)
#        #if "?" in text:
#        #    subprocess.run("vim /tmp/test.txt", shell=True)
#        if len(text) > 0:
#            raise ValidationError(message=f'{len(matches)} matches')

#buf = ""
#getch = _GetchUnix()
#print("\r0 ", end="")
# Read keyboard input from python
#class _GetchUnix:
#    def __init__(self):
#        import tty, sys
#
#    def __call__(self):
#        import sys, tty, termios
#        fd = sys.stdin.fileno()
#        old_settings = termios.tcgetattr(fd)
#        try:
#            tty.setraw(sys.stdin.fileno())
#            ch = sys.stdin.read(1)
#        finally:
#            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
#        return ch
#def draw_text():
#    try:
#        num_matches = len(list(filter(lambda x: re.match(buf, x), keys)))
#    except:
#        num_matches = 0
#    print("\r" + " "*40, end="")
#    print("\r" + str(num_matches) + " " + buf, end="")




#while True:
#    char = getch()
#    # Control-C
#    if ord(char) == 3:
#        break
#        
#    # C-S
#    elif ord(char) == 19:
#        with open(plot_name, "w") as f:
#            f.write("")
#
#        make_grid([metric for metric in matches[:30*3]])
#        subprocess.run(["vim", plot_name])
#        with open(plot_name) as f:
#            name = f.read().strip()
#            plt.savefig(name, format="png")
#        print("\r"*40)
#        print("plot saved to", name)
#    # Delete
#    elif ord(char) == 127:
#        buf = buf[:-1]
#    elif ord(char) == 24:
#        buf = ""
#    # ? open settings
#    elif ord(char) == 63:
#        subprocess.run(["vim", mpl_settings])
#        update_and_draw_grid()
#    # / list matches
#    elif ord(char) == 47:
#        try:
#            matches = list(filter(lambda x: re.match(buf, x), keys))
#            match_str = "\n".join(matches)       
#            print("\r" + " "*40,end="")  # clear line
#            print("\r", end="")           # reset cursor pos for img
#            subprocess.run("echo \"" + match_str + "\" | column --fillrows", shell=True)
#            #print()
#            #print(" ".join(sorted(map(str,matches))))
#        except:
#            pass
#        #update_and_draw_grid()
#    # Enter 
#    elif ord(char) == 13:
#        try:
#            matches = list(filter(lambda x: re.match(buf, x), keys))
#        except:
#            matches = []
#            old_matches = []
#            pass
#        if old_matches != matches:
#            update_and_draw_grid()
#            old_matches = matches
#    else:
#        buf += char
#    draw_text()
#sys.exit(0)
