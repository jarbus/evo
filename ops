{"author":{"id":"2925f8bae681ccf02a1c1ecc82cbb827e525744b16a0948b37a0b024362c4ec0"},"ops":[{"type":3,"timestamp":1670550826,"nonce":"R55tyDCkXnjk2kGJ8eU+oQKPy04=","message":"switching from glorot to normal does not improve performance","files":null},{"type":6,"timestamp":1670550869,"nonce":"TIsOYk9/5LcQG/K7wam3cyQAf/I=","target":"816aee107cf7baaf161c18e807d48a0b9dd73ab49b1bde9e7e2f9729ec8af704","message":"switching from glorot to normal or ignoring rng does not improve performance\n\ntotal\n  30.811 ms (57 allocations: 83.92 MiB)\nnon_glorot\n  29.146 ms (37 allocations: 91.55 MiB)\nnon_rng\n  42.255 ms (47 allocations: 83.92 MiB)\ntotal 1000\n  28.992 μs (35 allocations: 89.97 KiB)\ntotal 10000\n  266.971 μs (57 allocations: 861.00 KiB)\ntotal 100000\n  2.774 ms (57 allocations: 8.39 MiB)\ntotal 1000000\n  30.701 ms (57 allocations: 83.92 MiB)","files":null},{"type":3,"timestamp":1670551332,"nonce":"s3oyYwTFqcA3J3jS2UteuWAlehA=","message":"performance from 1:10 seeds\n\n  3.357 ms (12 allocations: 15.26 MiB)\n  6.478 ms (17 allocations: 22.89 MiB)\n  9.504 ms (22 allocations: 30.52 MiB)\n  12.573 ms (27 allocations: 38.15 MiB)\n  15.530 ms (32 allocations: 45.78 MiB)\n  19.048 ms (37 allocations: 53.41 MiB)\n  22.264 ms (42 allocations: 61.04 MiB)\n  25.353 ms (47 allocations: 68.67 MiB)\n  28.817 ms (52 allocations: 76.30 MiB)\n  31.987 ms (57 allocations: 83.92 MiB)","files":null},{"type":3,"timestamp":1670551535,"nonce":"Kz+9TX7XTNBzZ3L/h2NuKkzk2Ew=","message":"@fastmath and @inbounds make no difference\n\ntotal\n  15.667 ms (32 allocations: 45.78 MiB)\ninbounds_total\n  15.488 ms (32 allocations: 45.78 MiB)\nfastmath_total\n  15.463 ms (32 allocations: 45.78 MiB)","files":null},{"type":3,"timestamp":1670551802,"nonce":"rhrfPwRKb8t60LFj59OB2rW74GY=","message":"removing everything but the allocs doesn't make it better\ntotal\n  15.461 ms (32 allocations: 45.78 MiB)\njust_alloc\n  14.238 ms (30 allocations: 41.96 MiB)","files":null},{"type":3,"timestamp":1670560117,"nonce":"tw3NBqVNwomtLixS+KziVnxJx20=","message":"novelty can be optimized:\n\ncompute_novelty\n  60.202706 seconds (800.38 M allocations: 53.663 GiB, 3.16% gc time, 0.08% compilation time)\nfast_novelty\n  7.842436 seconds (784.94 k allocations: 23.881 GiB, 2.10% gc time, 0.31% compilation time)\n\n\nusing NearestNeighbors\nfunction fast_novelty(ind_bc::Vector, archive_and_pop::Matrix; k::Int=25)::Float64 \n    # for mazes\n    kdtree = KDTree(archive_and_pop, leafsize=10000000)\n    _, dists = knn(kdtree, ind_bc, k)\n    return sum(dists) / k\nend","files":null}]}